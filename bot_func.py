import telebot
import random
from dotenv import load_dotenv
import os
from telebot import types 
from telebot.handler_backends import StatesGroup, State
from sql_func import create_tables, Basic_words, Personal_words, User



dotenv_path = "private/confirm.env"
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

telebot_token = os.getenv('TOKEN_TELEBOT')
# yandex_token = 'YANDEX_TOKEN'

bot = telebot.TeleBot(telebot_token)


class Commands:
    add = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    delete = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
    next = '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚è≠'

class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    other_words = State()



@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, 'Hi! Welcome to Assistant Bot!\nI will help you with your English.\n\n–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∏–∑—É—á–µ–Ω–∏–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ.')
    bot.send_message(message.chat.id, "I have a few commands. Print /help and choose one.\n\n–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥. –û—Ç–ø—Ä–∞–≤—å /help –∏ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É.")


@bot.message_handler(commands=['cards'])
def buttons_card(message):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    russian_word = '–ú–∏—Ä'
    target_word = 'World'
    other_words = ['Car', 'Word', 'Cat']

    translate_word_button = types.KeyboardButton(target_word)
    other_words_buttons = [types.KeyboardButton(word) for word in other_words]

    buttons = [translate_word_button] + other_words_buttons
    random.shuffle(buttons)

    add_btn = types.KeyboardButton(Commands.add)
    delete_btn = types.KeyboardButton(Commands.delete)
    next_btn = types.KeyboardButton(Commands.next)
    buttons.extend([add_btn, delete_btn, next_btn])

    markup.add(*buttons)

    bot.send_message(message.chat.id, f"Guese the translation of the russian word '{russian_word}'\n\n–£–≥–∞–¥–∞–π –ø–µ—Ä–µ–≤–æ–¥ —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ '{russian_word}'", reply_markup=markup)

    bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
    with bot.retrieve_data(message.from_user.id,  message.chat.id) as data:
        data['translate_word'] = russian_word
        data['target_word'] = target_word
        data['other_words'] = other_words



@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id, 'So. Now i have 2 commands for you:\n\n–ò —Ç–∞–∫. –°–µ–π—á–∞—Å —É –º–µ–Ω—è –µ—Å—Ç—å 2 –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ç–µ–±—è:\n\n/cards - –ú–∏–Ω–∏ –∏–≥—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫\n/grammas - –ø–æ–∫–∞ –Ω–µ —Å–¥–µ–ª–∞–ª–∞')


@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    with bot.retrieve_data(message.from_user.id,  message.chat.id) as data:
        target_word = data['target_word']
    if message.text == target_word:
        bot.send_message(message.chat.id, '–í–µ—Ä–Ω–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è! ‚ù§')
    else:
        bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞.‚ùå –ù–µ —Å–¥–∞–≤–∞–π—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
