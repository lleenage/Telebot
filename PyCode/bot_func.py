import telebot
import random
from dotenv import load_dotenv
import os
from telebot import types, custom_filters
from telebot.handler_backends import StatesGroup, State
from sqlalchemy.orm import sessionmaker
from telebot.storage import StateMemoryStorage

from main import engine
from sql_func import User, Personal_words, Basic_words

dotenv_path = "../private/confirm.env"
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

telebot_token = os.getenv('TOKEN_TELEBOT')

state_storage = StateMemoryStorage()
bot = telebot.TeleBot(telebot_token)


known_users = []
userStep = {}
buttons = []

russian_words = [i.russian_word for i in (sessionmaker(bind=engine))().query(Basic_words).all()]
english_words = [i.english_word for i in (sessionmaker(bind=engine))().query(Basic_words).all()]
target_w = (sessionmaker(bind=engine))().query(Basic_words.english_word)
# print([i for i in (sessionmaker(bind=engine))().query(User.id).all()])

(sessionmaker(bind=engine))().close()


def get_user_step(user_name, user_id):
    if user_id in userStep:
        return userStep[user_id]
    else:
        known_users.extend([user_name, user_id])
        userStep[user_id] = 0
        print("–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π e—â–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª '/start'")
        return 0

class Commands:
    add = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    delete = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô'
    next = '–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚è≠'

class MyStates(StatesGroup):
    target_word = State()
    translate_word = State()
    other_words = State()



def add_users(engine, user_id, user_name):   #—Ñ—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ user_id, user_name
    session = (sessionmaker(bind=engine))()
    session.add(User(user_id=user_id, name=user_name))
    for i in session.query(User).all():
        print(i)
    session.commit()
    session.close()

def add_personal_word(engine, russian_word: str, english_word: str, uid: int): #—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –±–¥
    session = (sessionmaker(bind=engine))()
    for u_id in session.query(User.id).filter(User.user_id == uid).all():
        print(u_id)
        if russian_word not in session.query(Personal_words.russian_word).all():
            session.add(Personal_words(russian_word=russian_word, english_word=english_word, user_id=u_id))
            session.commit()
            for i in session.query(Personal_words).filter(Personal_words.russian_word == russian_word).all():
                result = i #–Ω–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω, –∑–Ω–∞—á–∏—Ç –µ–≥–æ –Ω–µ—Ç??

                session.close()
                return f'{result} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.'


def delete_word(del_word, mess):
    import re

    session = (sessionmaker(bind=engine))()
    if del_word in Basic_words.english_word or del_word in Basic_words.russian_word:
        print(f'–ü—ã—Ç–∞—é—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ {del_word}, —á—Ç–æ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö.')
        @bot.message_handler(func=lambda message: True, content_types=['text'])
        def send_err_exists(mess):
            bot.send_message(mess.chat.id, f'–°–ª–æ–≤–æ {del_word} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–≤–∞—Ö –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —É–¥–∞–ª–µ–Ω–æ.')

    elif del_word in Personal_words.russian_word or del_word in Personal_words.english_word:
        if re.search(r'[^–∞-—è–ê-–Ø]', del_word):
            session.query(Personal_words).filter(Personal_words.russian_word == del_word).delete() # —É–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç
        elif re.search(r'[^a-zA-Z]', del_word):
            session.query(Personal_words).filter(Personal_words.english_word == del_word).delete() # —É–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç
        @bot.message_handler(func=lambda message: True, content_types=['text'])
        def send_err_exists(mess):
            bot.send_message(mess.chat.id, f'–°–ª–æ–≤–æ {del_word} –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ.')

    else:
        print(f'–ü—ã—Ç–∞—é—Ç—Å—è —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ {del_word}, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –Ω–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ –±–¥.')
        @bot.message_handler(func=lambda message: True, content_types=['text'])
        def send_err_exists(mess):
            bot.send_message(mess.chat.id, f'–°–ª–æ–≤–æ {del_word} –µ—â–µ –Ω–µ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.')

        session.commit()
    print(f'–£–¥–∞–ª–∏–ª–∏ —Å–ª–æ–≤–æ {del_word} –∏–∑ –±–¥')


@bot.message_handler(commands=['start'])   #–Ω–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –∫–æ–º–Ω–¥–∞ "start"
def send_welcome(message):
    user_id = message.from_user.id
    user_name = message.chat.username
    if user_id not in known_users:
        known_users.extend([user_name, user_id])
        add_users(engine, user_id, user_name) #–¥–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–¥
        userStep[user_id] = 0
        bot.send_message(user_id, f"""–ü—Ä–∏–≤–µ—Ç, {user_name}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ë–æ—Ç!
                                    \n–û—Ç–ø—Ä–∞–≤—å /help –∏ –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏!""")


@bot.message_handler(commands=['help'])
def send_help(message):
    bot.send_message(message.chat.id, """–ï—Å–ª–∏ —Ç–µ–±–µ —Å–ª–æ–∂–Ω–æ –¥–∞–µ—Ç—Å—è –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–æ–≤—ã–µ —Å–ª–æ–≤, —è —Ç–µ–±–µ –ø–æ–º–æ–≥—É!
                                      \n–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –æ–±—É—á–µ–Ω–∏—è. –¢–µ–±–µ –±—É–¥—É—Ç –¥–∞–Ω—ã 10 –±–∞–∑–æ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è –∏—Ö –∏–∑—É—á–µ–Ω–∏—è.
                                      \n–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –æ–±—É—á–µ–Ω–∏–µ –±—ã–ª–æ –±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º.(–ë–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–µ–Ω–∏—é –Ω–µ –ø–æ–¥–ª–µ–∂–∞—Ç.)\n
                                      \n–£ –º–µ–Ω—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥, –Ω–æ –≤ –±—É–¥—É—â–µ–º –∏—Ö –±—É–¥–µ—Ç –±–æ–ª—å—à–µ:\n
                                      \n/training_cards - –ü—Ä–∏–º–µ—Ä –º–∏–Ω–∏ –∏–≥—Ä—ã, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã –ø–æ–π–º–µ—à—å –ø—Ä–∏—Ü–∏–ø —Ä–∞–±–æ—Ç—ã –∏–∑—É—á–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö. \
                                      –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –º–æ–∂–µ—à—å –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–π –±–∞–∑—ã –æ–±—É—á–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏—Ö –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 4
                                      \n/cards - –ú–∏–Ω–∏ –∏–≥—Ä–∞ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è —Å–ª–æ–≤ –≤ –≤–∏–¥–µ –∫–∞—Ä—Ç–æ—á–µ–∫. –ù–µ –∑–∞–±—É–¥—å –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —Å–µ–±—è –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞!
                                      \n'–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï' - –ø–æ–∑–≤–æ–ª–∏—Ç –¥–æ–±–∞–≤—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è.
                                      \n'–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô' - –ø–æ–∑–≤–æ–ª–∏—Ç —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–ª–æ–≤–æ. –ë–∞–∑–æ–≤—ã–µ —Å–ª–æ–≤–∞ —É–¥–∞–ª–∏—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.""")


@bot.message_handler(commands=['training_cards'])    #—Å–æ–º–∞–Ω–¥–∞ "cards"
def buttons_card(message):
    chat_id = message.chat.id
    #–ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–≥–æ –º–∏–Ω–∏–º—É–º–∞ —Å–ª–æ–≤(4)
    words = random.sample(english_words, 4)

    if not words or len(words) < 4:
        bot.send_message(chat_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–ª–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫!\n–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —á–µ—Ä–µ–∑ '/–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'.")
        print("–°–ª–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫.")
    else:
        global buttons
        buttons = []
        markup = types.ReplyKeyboardMarkup(row_width=2)
        translate_word = random.choice(russian_words)
        target_word = target_w.filter(Basic_words.russian_word == translate_word).all()[0][0]
        other_words = random.sample(english_words, 3)

        translate_word_button = types.KeyboardButton(target_word)
        other_words_buttons = [types.KeyboardButton(word) for word in other_words]

        buttons = [translate_word_button] + other_words_buttons
        random.shuffle(buttons)

        add_btn = types.KeyboardButton(Commands.add)
        delete_btn = types.KeyboardButton(Commands.delete)
        next_btn = types.KeyboardButton(Commands.next)
        buttons.extend([add_btn, delete_btn, next_btn])

        markup.add(*buttons)

        bot.send_message(message.chat.id, f"""–í—ã–±–µ—Ä–∏ –≤–µ—Ä–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Ä—É—Å—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ '{translate_word}'""", reply_markup=markup)

        bot.set_state(message.from_user.id, MyStates.target_word, message.chat.id)
        with bot.retrieve_data(message.from_user.id,  message.chat.id) as data:
            data['translate_word'] = translate_word
            data['target_word'] = target_word
            data['other_words'] = other_words


@bot.message_handler(func=lambda message: message.text == Commands.add, content_types=['text'])
def add_word(message):

    bot.send_message(message.chat.id, """–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'. \
                –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
                \n–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: '–ú–∞—à–∏–Ω–∞'""")
    bot.register_next_step_handler(message, get_russ_word)
def get_russ_word(message):
    global add_russian_word
    add_russian_word = message.text
    bot.send_message(message.chat.id, f"""–ü—Ä–æ–¥–æ–ª–∂–∏–º.
        \n–ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ {add_russian_word} –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.
        \n–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: 'Car'""")
    bot.register_next_step_handler(message, get_eng_word)
def get_eng_word(message):
    add_english_word = message.text
    user_id = message.from_user.id
    print(add_personal_word(engine, add_russian_word, add_english_word, user_id))


@bot.message_handler(func=lambda message: message.text == Commands.next, content_types=['text'])
def next_card(message):
    buttons_card(message)

@bot.message_handler(func=lambda message: message.text == Commands.delete, content_types=['text'])
def del_word(message):
    bot.send_message(message.chat.id, """–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–æ–º–∞–Ω–¥—É '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'. \
                –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏–ª–∏ –µ–≥–æ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.\
                –ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: '–º–∞—à–∏–Ω–∞' –∏–ª–∏ 'car'""")
    delete_word(message.text, message)

@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    with bot.retrieve_data(message.from_user.id,  message.chat.id) as data:
        target_word = data['target_word']
        if message.text == target_word:
            bot.send_message(message.chat.id, '–í–µ—Ä–Ω–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é, —Ç—ã —Ö–æ—Ä–æ—à–æ —Å–ø—Ä–∞–≤–∏–ª—Å—è! ‚ù§')

        elif message.text != target_word and message.text not in [Commands.next, Commands.delete, Commands.add]:
            bot.send_message(message.chat.id, '–û—à–∏–±–∫–∞.‚ùå –ù–µ —Å–¥–∞–≤–∞–π—Å—è, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!')
